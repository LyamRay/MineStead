plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'me.lyamray'

repositories {
    mavenCentral()
    maven { url "https://repo.fancyinnovations.com/releases" }
    maven { name = "papermc-repo"; url = uri("https://repo.papermc.io/repository/maven-public/") }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly("de.oliver:FancyNpcs:2.7.0")
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

static def incrementVersion(String version) {
    def parts = version.tokenize('.')*.toInteger()
    parts[-1] = parts[-1] + 1
    if (parts[-1] > 99) {
        parts[-1] = 0
        parts[-2] = parts[-2] + 1
    }
    return parts.join('.')
}

tasks.register('bumpVersion') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def props = new Properties()
        propertiesFile.withInputStream { props.load(it) }

        def currentVersion = props.getProperty('version')
        def newVersion = incrementVersion(currentVersion)

        println "Bumping version from $currentVersion to $newVersion"

        props.setProperty('version', newVersion)
        propertiesFile.withOutputStream { props.store(it, null) }

        project.version = newVersion
    }
}

tasks.named('jar') {
    destinationDirectory.set(file("C:/Users/lyamr/Desktop/MineStead-Server/plugins"))
    archiveFileName.set("${project.name}-${project.version}.jar")

    doFirst {
        def dir = destinationDirectory.get().asFile
        dir.listFiles()?.findAll { it.name.startsWith("${project.name}-") && it.name.endsWith(".jar") }?.each { it.delete() }
        println "Deleted old JARs in $dir"
    }
}

processResources {
    dependsOn tasks.named('bumpVersion')

    def propsMap = [
            name   : project.name,
            version: project.version
    ]

    inputs.properties propsMap
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand propsMap
    }

    tasks.named('jar') {
        destinationDirectory = file("C:/Users/lyamr/Desktop/Server/plugins")
        archiveFileName = "${project.name}-${project.version}.jar"
    }
}